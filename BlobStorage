using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Azure.Storage;
using Microsoft.Azure.Storage.Blob;

namespace RaiseBlobPermission
{
    class Program
    {
        public static void Main()
        {
       
            GrantPermissionRaiseBlobStorage();
              ListRaiseBlobs();
            DeleteRaiseBlobs();
        }
        public static void GrantPermissionRaiseBlobStorage()
        {
            Console.WriteLine("Hello From Raise method");
            string storageConnectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");
            CloudStorageAccount storageAccount;

            if (CloudStorageAccount.TryParse(storageConnectionString, out storageAccount))
            {

                // If the connection string is valid, proceed with operations against Blob
                // storage here.

                // Create the CloudBlobClient that represents the 
                // Blob storage endpoint for the storage account.CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient();
                // Create a container called 'quickstartblobs' and 
                // append a GUID value to it to make the name unique.
                CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient();
                CloudBlobContainer cloudBlobContainer =
                    cloudBlobClient.GetContainerReference("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");//Enter Blob Container Name
                BlobContainerPermissions permissions = new BlobContainerPermissions
                {
                    PublicAccess = BlobContainerPublicAccessType.Blob
                };
                cloudBlobContainer.SetPermissions(permissions);
            }
        }

        public static void ListRaiseBlobs()
        {
            Console.WriteLine("List blobs in container.");
            string storageConnectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageConnectionString);



            // If the connection string is valid, proceed with operations against Blob
            // storage here.


            CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient();
            CloudBlobContainer cloudBlobContainer =
               cloudBlobClient.GetContainerReference("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");//Enter Blob Container Name
            BlobContinuationToken blobContinuationToken = null;
            do
            {

                var results = cloudBlobContainer.ListBlobsSegmented(null, blobContinuationToken);
                // Get the value of the continuation token returned by the listing call.
                blobContinuationToken = results.ContinuationToken;
                foreach (IListBlobItem item in results.Results)
                {
                    Console.WriteLine(item.Uri);
                }
            }
            while (blobContinuationToken != null);
            Console.WriteLine("Completed Listing Blobs");
        }

        public static void DeleteRaiseBlobs()
        {
            Console.WriteLine("Delete blobs in container.");
            string storageConnectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageConnectionString);



            // If the connection string is valid, proceed with operations against Blob
            // storage here.


            CloudBlobClient cloudBlobClient = storageAccount.CreateCloudBlobClient();
            CloudBlobContainer cloudBlobContainer =
                  cloudBlobClient.GetContainerReference("xxxxxxxxxxxxxxxxxxxxxxxxxxxxx");//Enter Blob Container Name
            Console.WriteLine("Deleting the container");
            if (cloudBlobContainer != null)
            {
                cloudBlobContainer.DeleteIfExists();
            }


        }
}




